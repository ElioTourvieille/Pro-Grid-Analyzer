---
// TournamentUploader.astro - Upload de fichiers CSV de tournois
import Button from './ui/Button.astro';
---

<script>
	// Import apiClient dans le scope global
	import { apiClient } from '../lib/api';
	(window as any).apiClient = apiClient;
</script>

<div class="bg-card text-card-foreground flex flex-col gap-6 rounded-xl border border-border py-6 shadow-sm">
	<div class="@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6">
		<div class="leading-none font-semibold text-2xl text-card-foreground font-sans">Upload des Tournois</div>
	</div>
	
	<div class="px-6">
		<div class="space-y-6">
			<!-- Drag & Drop Zone -->
			<div
				id="drop-zone"
				class="border-2 border-dashed border-border rounded-xl p-12 text-center transition-all duration-200 hover:border-primary hover:bg-accent/5"
			>
				<div class="space-y-4">
					<div class="text-6xl text-muted-foreground/50">üìä</div>
					<div>
						<p class="text-lg font-medium text-card-foreground mb-2 font-sans">
							Glisse ton fichier CSV ici
						</p>
						<p class="text-muted-foreground text-sm font-sans">
							ou clique pour s√©lectionner un fichier
						</p>
					</div>
					<input
						type="file"
						id="file-input"
						accept=".csv"
						class="hidden"
					/>
				</div>
			</div>

			<!-- File Info -->
			<div id="file-info" class="hidden">
				<div class="bg-green-500/20 border border-green-500/30 rounded-lg p-4">
					<div class="flex items-center space-x-3">
						<div class="text-green-400">‚úì</div>
						<div>
							<p class="text-card-foreground font-medium font-sans" id="file-name">tournaments.csv</p>
							<p class="text-green-400 text-sm font-sans" id="file-size">1.2 MB</p>
						</div>
					</div>
				</div>
			</div>

			<!-- Analyze Button -->
			<Button
				id="analyze-btn"
				variant="default"
				size="lg"
				class="w-full bg-primary hover:bg-primary/90 text-primary-foreground font-sans"
				disabled
			>
				<span>üîç</span>
				<span>Analyser mes tournois</span>
			</Button>
		</div>
	</div>
</div>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const dropZone = document.getElementById('drop-zone');
		const fileInput = document.getElementById('file-input');
		const fileInfo = document.getElementById('file-info');
		const fileName = document.getElementById('file-name');
		const fileSize = document.getElementById('file-size');
		const analyzeBtn = document.getElementById('analyze-btn');

		function handleFile(file: File) {
			if (file.type !== 'text/csv' && !file.name.endsWith('.csv')) {
				alert('Veuillez s√©lectionner un fichier CSV');
				return;
			}

			// Display file info
			if (fileName) fileName.textContent = file.name;
			if (fileSize) fileSize.textContent = formatFileSize(file.size);
			if (fileInfo) fileInfo.classList.remove('hidden');
			
			// Enable analyze button
			if (analyzeBtn) {
				(analyzeBtn as HTMLButtonElement).disabled = false;
			}
			
			// Store file for later use
			(window as any).uploadedFile = file;
		}

		function formatFileSize(bytes: number) {
			if (bytes === 0) return '0 Bytes';
			const k = 1024;
			const sizes = ['Bytes', 'KB', 'MB', 'GB'];
			const i = Math.floor(Math.log(bytes) / Math.log(k));
			return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
		}

		// Handle drag and drop
		if (dropZone) {
			dropZone.addEventListener('dragover', (e) => {
				e.preventDefault();
				dropZone.classList.add('border-primary', 'bg-accent/5');
			});

			dropZone.addEventListener('dragleave', () => {
				dropZone.classList.remove('border-primary', 'bg-accent/5');
			});

			dropZone.addEventListener('drop', (e) => {
				e.preventDefault();
				dropZone.classList.remove('border-primary', 'bg-accent/5');
				
				const files = e.dataTransfer?.files;
				if (files && files.length > 0) {
					handleFile(files[0]);
				}
			});

			// Handle click to select file
			dropZone.addEventListener('click', () => {
				if (fileInput) fileInput.click();
			});
		}

		if (fileInput) {
			fileInput.addEventListener('change', (e) => {
				const target = e.target as HTMLInputElement;
				if (target.files && target.files.length > 0) {
					handleFile(target.files[0]);
				}
			});
		}

		// Handle analyze button click
		if (analyzeBtn) {
			analyzeBtn.addEventListener('click', async () => {
				const file = (window as any).uploadedFile;
				if (!file) {
					alert('Veuillez d\'abord uploader un fichier');
					return;
				}
				
				try {
					// Analyser directement le fichier
					const result = await (window as any).apiClient.analyzeFile(file);
					const event = new CustomEvent('analysisComplete', { 
						detail: { results: result.results, summary: result.summary } 
					});
					window.dispatchEvent(event);
					
				} catch (err) {
					alert('Erreur lors de l\'analyse: ' + (err instanceof Error ? err.message : 'Erreur inconnue'));
				}
			});
		}
	});
</script> 